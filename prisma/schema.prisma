// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}



// Define Enums for User Roles, Order Status, and Payment Status
enum Role {
  CUSTOMER
  ADMIN
  VENDOR
}

enum OrderStatus {
  PENDING
  SHIPPED
  DELIVERED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
}

// Models for your e-commerce application

model User {
  id        Int      @id @default(autoincrement())
  firstName String
  lastName  String
  email     String   @unique
  password  String
  phone     String
  role      Role     // Using Enum here for Role
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  orders    Order[]
  reviews   Review[]
  addresses Address[]

  Product Product[]

  Profile Profile[]
}

// Profile model for storing additional user information
model Profile {
  id        Int       @id @default(autoincrement())
  bio       String?
  avatar    String?   // URL of the profile picture
  website   String?
  social    Json?     // JSON object for social media links
  user      User      @relation(fields: [userId], references: [id])
  userId    Int       @unique
}

model Product {
  id          Int       @id @default(autoincrement())
  name        String
  description String
  price       Float
  stock       Int
  images      Image[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  vendorId    Int
  vendor      User      @relation(fields: [vendorId], references: [id])

  categoryId  Int
  category    Category  @relation(fields: [categoryId], references: [id])

  reviews     Review[]
  orderItems  OrderItem[]
}

model Category {
  id          Int       @id @default(autoincrement())
  name        String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  products    Product[]
}

model Order {
  id           Int          @id @default(autoincrement())
  orderStatus  OrderStatus // Using Enum here for OrderStatus
  paymentStatus PaymentStatus // Using Enum here for PaymentStatus
  totalAmount  Float
  shippingAddr String
  billingAddr  String
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt

  userId       Int
  user         User         @relation(fields: [userId], references: [id])

  orderItems   OrderItem[]
  payments     Payment[]
}

model OrderItem {
  id        Int       @id @default(autoincrement())
  quantity  Int
  price     Float
  totalPrice Float
  
  orderId   Int
  order     Order     @relation(fields: [orderId], references: [id])

  productId Int
  product   Product   @relation(fields: [productId], references: [id])
}

model Payment {
  id            Int          @id @default(autoincrement())
  paymentMethod String       // 'credit_card', 'bank_transfer'
  paymentStatus PaymentStatus // Using Enum here for PaymentStatus
  transactionId String
  amount        Float

  paymentDate   DateTime     @default(now())

  orderId       Int
  order         Order        @relation(fields: [orderId], references: [id])
}

model Image{
  id             Int          @id  @default(autoincrement())
  url            String
  created_at     DateTime @default(now())
  updated_at     DateTime @updatedAt
  productId      Int
  product        Product      @relation(fields: [productId],references: [id])


}

model Review {
  id        Int       @id @default(autoincrement())
  rating    Int       // Rating from 1 to 5
  text      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  userId    Int
  user      User      @relation(fields: [userId], references: [id])

  productId Int
  product   Product   @relation(fields: [productId], references: [id])
}

model Address {
  id          Int       @id @default(autoincrement())
  addressLine1 String
  addressLine2 String?
  city        String
  state       String
  country     String
  postalCode  String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  userId      Int
  user        User      @relation(fields: [userId], references: [id])
}
