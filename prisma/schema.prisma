// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Define Enums for User Roles, Order Status, and Payment Status
enum Role {
  CUSTOMER
  ADMIN
  VENDOR
}

enum OrderStatus {
  PENDING
  SHIPPED
  DELIVERED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
}

// Models for your e-commerce application

model User {
  id        String   @id @default(cuid()) @map("_id")
  firstName String
  lastName  String
  email     String   @unique
  password  String
  phone     String
  role      Role     @default(CUSTOMER) // Using Enum here for Role
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  addresses Json     @default("{}")

  orders  Order[]
  reviews Review[]

  Product Product[]

  Profile Profile[]
}

// Profile model for storing additional user information
model Profile {
  id      String  @id @default(cuid()) @map("_id")
  bio     String?
  avatar  String? // URL of the profile picture
  website String?
  social  Json? // JSON object for social media links
  user    User    @relation(fields: [userId], references: [id])
  userId  String
}

model Product {
  id          String   @id @default(cuid()) @map("_id")
  name        String
  description String?
  price       String
  images      String[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  vendorId String?
  vendor   User?   @relation(fields: [vendorId], references: [id])

  categoryId String?
  category   Category? @relation(fields: [categoryId], references: [id])

  reviews    Review[]
  orderItems OrderItem[]
}

model Category {
  id String @id @default(cuid()) @map("_id")

  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  products Product[]
}

model Order {
  id            String        @id @default(cuid()) @map("_id")
  orderStatus   OrderStatus // Using Enum here for OrderStatus
  paymentStatus PaymentStatus // Using Enum here for PaymentStatus
  totalAmount   Float
  shippingAddr  String
  billingAddr   String
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  userId String
  user   User   @relation(fields: [userId], references: [id])

  orderItems OrderItem[]
  payments   Payment[]
}

model OrderItem {
  id         String @id @default(cuid()) @map("_id")
  quantity   Int
  price      Float
  totalPrice Float

  orderId String
  order   Order  @relation(fields: [orderId], references: [id])

  productId String
  product   Product @relation(fields: [productId], references: [id])
}

model Payment {
  id            String        @id @default(cuid()) @map("_id")
  paymentMethod String // 'credit_card', 'bank_transfer'
  paymentStatus PaymentStatus // Using Enum here for PaymentStatus
  transactionId String
  amount        Float

  paymentDate DateTime @default(now())

  orderId String
  order   Order  @relation(fields: [orderId], references: [id])
}

model Review {
  id        String   @id @default(cuid()) @map("_id")
  rating    Int // Rating from 1 to 5
  text      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId String
  user   User   @relation(fields: [userId], references: [id])

  productId String
  product   Product @relation(fields: [productId], references: [id])
}
